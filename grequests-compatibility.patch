From 6566cb4760c112cf6d2c17bd88e15ff8235dc390 Mon Sep 17 00:00:00 2001
From: Roman Haritonov <reclosedev@gmail.com>
Date: Sun, 13 Jan 2013 20:14:56 +0400
Subject: [PATCH] Requests v1.x.x compatibility. Fixes #28 #29

---
 grequests.py |  103 ++++++++++++++++++++++++++++++++++++----------------------
 1 file changed, 65 insertions(+), 38 deletions(-)

diff --git a/grequests.py b/grequests.py
index eabf909..18b0f79 100644
--- a/grequests.py
+++ b/grequests.py
@@ -8,6 +8,7 @@
 by gevent. All API methods return a ``Request`` instance (as opposed to
 ``Response``). A list of requests can be sent with ``map()``.
 """
+from functools import partial
 
 try:
     import gevent
@@ -19,7 +20,7 @@
 # Monkey-patch.
 curious_george.patch_all(thread=False, select=False)
 
-from requests import api
+from requests import Session
 
 
 __all__ = (
@@ -28,79 +29,105 @@
 )
 
 
-def patched(f):
-    """Patches a given API function to not send."""
+class AsyncRequest(object):
+    """ Asynchronous request.
 
-    def wrapped(*args, **kwargs):
+    Accept same parameters as ``Session.request`` and some additional:
 
-        kwargs['return_response'] = False
-        kwargs['prefetch'] = True
-
-        config = kwargs.get('config', {})
-        config.update(safe_mode=True)
-
-        kwargs['config'] = config
-
-        return f(*args, **kwargs)
-
-    return wrapped
-
-
-def send(r, pool=None, prefetch=False):
+    :param session: Session which will do request
+    :param callback: Callback called on response.
+                     Same as passing ``hooks={'response': callback}``
+    """
+    def __init__(self, method, url, **kwargs):
+        #: Request method
+        self.method = method
+        #: URL to request
+        self.url = url
+        #: Associated ``Session``
+        self.session = kwargs.pop('session', None)
+        if self.session is None:
+            self.session = Session()
+
+        callback = kwargs.pop('callback', None)
+        if callback:
+            kwargs['hooks'] = {'response': callback}
+
+        #: The rest arguments for ``Session.request``
+        self.kwargs = kwargs
+        #: Resulting ``Response``
+        self.response = None
+
+    def send(self, **kwargs):
+        """
+        Prepares request based on parameter passed to constructor and optional ``kwargs```.
+        Then sends request and saves response to :attr:`response`
+
+        :returns: ``Response``
+        """
+        merged_kwargs = {}
+        merged_kwargs.update(self.kwargs)
+        merged_kwargs.update(kwargs)
+        self.response =  self.session.request(self.method,
+                                              self.url, **merged_kwargs)
+        return self.response
+
+
+def send(r, pool=None, stream=False):
     """Sends the request object using the specified pool. If a pool isn't
     specified this method blocks. Pools are useful because you can specify size
     and can hence limit concurrency."""
-
     if pool != None:
-        return pool.spawn(r.send, prefetch=prefetch)
+        return pool.spawn(r.send, stream=stream)
+
+    return gevent.spawn(r.send, stream=stream)
 
-    return gevent.spawn(r.send, prefetch=prefetch)
 
+# Shortcuts for creating AsyncRequest with appropriate HTTP method
+get = partial(AsyncRequest, 'GET')
+options = partial(AsyncRequest, 'OPTIONS')
+head = partial(AsyncRequest, 'HEAD')
+post = partial(AsyncRequest, 'POST')
+put = partial(AsyncRequest, 'PUT')
+patch = partial(AsyncRequest, 'PATCH')
+delete = partial(AsyncRequest, 'DELETE')
 
-# Patched requests.api functions.
-get = patched(api.get)
-options = patched(api.options)
-head = patched(api.head)
-post = patched(api.post)
-put = patched(api.put)
-patch = patched(api.patch)
-delete = patched(api.delete)
-request = patched(api.request)
+# synonym
+def request(method, url, **kwargs):
+    return AsyncRequest(method, url, **kwargs)
 
 
-def map(requests, prefetch=True, size=None):
+def map(requests, stream=False, size=None):
     """Concurrently converts a list of Requests to Responses.
 
     :param requests: a collection of Request objects.
-    :param prefetch: If False, the content will not be downloaded immediately.
+    :param stream: If True, the content will not be downloaded immediately.
     :param size: Specifies the number of requests to make at a time. If None, no throttling occurs.
     """
 
     requests = list(requests)
 
     pool = Pool(size) if size else None
-    jobs = [send(r, pool, prefetch=prefetch) for r in requests]
+    jobs = [send(r, pool, stream=stream) for r in requests]
     gevent.joinall(jobs)
 
     return [r.response for r in requests]
 
 
-def imap(requests, prefetch=True, size=2):
+def imap(requests, stream=False, size=2):
     """Concurrently converts a generator object of Requests to
     a generator of Responses.
 
     :param requests: a generator of Request objects.
-    :param prefetch: If False, the content will not be downloaded immediately.
+    :param stream: If True, the content will not be downloaded immediately.
     :param size: Specifies the number of requests to make at a time. default is 2
     """
 
     pool = Pool(size)
 
     def send(r):
-        r.send(prefetch)
-        return r.response
+        return r.send(stream=stream)
 
     for r in pool.imap_unordered(send, requests):
         yield r
 
-    pool.join()
\ No newline at end of file
+    pool.join()
-- 
1.7.10

